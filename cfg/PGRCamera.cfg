#!/usr/bin/env python

PACKAGE='pgr_camera'
#import roslib; roslib.load_manifest(PACKAGE)

#from driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# @todo Think about levels. Setting most of these to STOP to guarantee atomicity.
# @todo Double check these ranges, defaults
#mode_enum = gen.enum( [ gen.const("StreamingMode", str_t, "streaming", "Streaming mode"),
#                        gen.const("PolledMode", str_t, "polled", "Polled mode") ], "Enum to set the mode.")
#format_enum = gen.enum( [ gen.const("Y8", str_t, "Y8", "Y8 mode"),
#                          gen.const("RGB", str_t, "RGB", "RGB mode") ], "Enum to set the format.")
#       Name                 Type      Reconfiguration level             Description   Default   Min   Max
#gen.add("trigger_mode",      str_t,    SensorLevels.RECONFIGURE_STOP,    "Camera mode (streaming vs. polled)", "streaming", edit_method = mode_enum)
gen.add("auto_exposure",     bool_t,   0, "Sets the camera exposure duration to automatic. Causes the @b exposure setting to be ignored.", True)
gen.add("exposure",         double_t,  0, "Camera exposure in EV",0,-7.58,2.41)
gen.add("auto_shutter",     bool_t,   0, "Sets the camera shutter speed to automatic. Allows the auto-exposure to adjust as necessary.", True)
gen.add("shutter",          double_t, 0, "Camera shutter length in ms.", 0.015, 0, 152.163391)
gen.add("auto_gain",         bool_t,   0, "Sets the analog gain to automatic. Causes the @b gain setting to be ignored.", True)
gen.add("gain",              double_t,    0, "The gain level in dB.", 0, 0, 24.014038)
gen.add("auto_whitebalance", bool_t,   0, "Whether whitebalance will continuously adjust to the current scene. Causes the @b whitebalance_red and @b whitebalance_blue settings to be ignored.", True)
gen.add("whitebalance_red",  int_t,    0, "Red gain as a percentage of the camera default setting.", 0, 0, 1023)
gen.add("whitebalance_blue", int_t,    0, "Blue gain as a percentage of the camera default setting.", 0, 0, 1023)
# @todo ROI, binning...
gen.add("frame_id",          str_t,    0, "The optical camera TF frame set in message headers.", "camera")
#gen.add("roi_x_offset",          int_t,    0, "X offset of the region of interest.", 0, 0, 4000)
#gen.add("roi_y_offset",          int_t,    0, "Y offset of the region of interest.", 0, 0, 4000)
#gen.add("roi_width",             int_t,    0, "Width of the region of interest (0 for automatic).", 0, 0, 4000)
#gen.add("roi_height",            int_t,    0, "Height of the region of interest (0 for automatic).", 0, 0, 4000)
# @todo Add more modes and framerates
gen.add("width",             int_t,    0, "Capture width", 640, 640, 1296)
gen.add("height",            int_t,    0, "Capture height", 480, 480, 964)
#gen.add("format",            str_t,    0, "Capture format (Y8,RGB)", "Y8", edit_method = format_enum)
gen.add("rotate_direction",             int_t,    0, "Direction to rotate 90 degree", 0, -1, 1)

gen.add("framerate",        double_t, 0, "Camera frame rate in Hz.", 5, 1.151, 60.861)
#gen.add("camera_info_url", str_t, 0,
#        "Camera [[camera_info_manager#URL_Names|calibration URL]] for this video_mode (uncalibrated if null).", "")

exit(gen.generate(PACKAGE, "pgr_camera_node", "PGRCamera"))
